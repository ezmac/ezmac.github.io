---
layout: post
title:  "http 1.1 and host headers"
date:   2015-09-19 11:38:37
categories: http fullstack_in_coldfusion_world
---
Earlier this week, I ran into an interesting problem that I solved with one command in bash.  For some background, the app was in coldfusion and sometimes, it's useful to reset one app.  To this end, there's a url parameter that's used to reset the app with a single git request.  No problem, just curl that url, right?  The fun part is the domain is load balanced with sticky sessions.  So in theory, you could send several requests and they'd end up hitting the same machine.  So, how do you have any control over where they go?  Since we have access to the actual machines behind the load balancer, we can send the requests directly to those machines.  Doing this gives a generic error: "requested site not found".

This is where http 1.1 comes into play.  Http 1.1 is backed by two RFCs from '97 and '99 and hasn't been updated since.  One of the things included in the standard is the 'Host' header.  Because you can host multiple domains on one machine, the host header is used to specify which web server will receive the request.  Without it, the server doesn't know where to route the request.  In our case, it was routing to a default server that served one page containing "requested site not found".  So, for us to reset four servers, we just had to hit the servers directly with the right host.

`curl -H 'Host: my.domain' webhost1.hosting.my.domain`
`curl -H 'Host: my.domain' webhost2.hosting.my.domain`
etc.

Someone on the team was confused about using the domain names of the hosts like this (webhost1.hosting.my.domain).  In this case, it's valid because it will get translated to the machine's IP and in this case, there's only one machine behind each subdomain.  Putting it all together, we can write a simple bash script to reset hosts, which I did.

Then someone translated it to a coldfusion script.  Baby steps.
